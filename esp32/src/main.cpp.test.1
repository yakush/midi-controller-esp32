#include <Arduino.h>
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include "config.h"

static AsyncWebServer server = AsyncWebServer(SERVER_PORT);
static AsyncWebSocket ws = AsyncWebSocket("/ws");

static void handleWebSocketMessageBinary(AwsFrameInfo *info, byte *data, size_t len);
void onEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len);

//-------------------------------------------------------
//-------------------------------------------------------

//-------------------------------------------------------
//-------------------------------------------------------

size_t webLog_print(const uint8_t *payload, size_t size)
{
  if (WiFi.status() == WL_CONNECTED)
  {
    ws.textAll((char *)payload, size);
  }
  return size;
}

class WebLoggerClass : public Print
{

public:
  WebLoggerClass() {}

  void begin()
  {
  }
  void end()
  {
  }

  size_t write(uint8_t x)
  {
    uint8_t buff[1];
    buff[0] = x;
    return webLog_print(buff, 1);
  }

  size_t write(const uint8_t *buffer, size_t size)
  {
    return webLog_print(buffer, size);
  }
};
WebLoggerClass WebLogger;
//-------------------------------------------------------
//-------------------------------------------------------

void setup()
{
  Serial.begin(115200);

  // init WIFI:
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.println("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());

  // init server:
  ws.onEvent(onEvent);
  server.addHandler(&ws);

  // endpoints:
  // server.on("/", HTTP_GET, [](AsyncWebServerRequest *request)
  //           { request->send(SPIFFS, "/index.html", "text/html"); });

  // server.serveStatic("/", SPIFFS, "/");

  server.on("/test", HTTP_GET, [](AsyncWebServerRequest *request)
            { request->send(200, "text/html", "hello"); });

  //-------------------------------------------------------
  server.begin();
}

void loop()
{
  ws.cleanupClients();
  static unsigned long last = millis();
  static unsigned long counter = 1;
  if (millis() > last + 1000)
  {
    // Logger.println("time:");
    // ws.printfAll("hi %d", counter);
    WebLogger.printf("hi %ul", counter);
    last = millis();
    counter++;
  }
}

//-------------------------------------------------------
//-------------------------------------------------------

static void handleWebSocketMessage(AwsFrameInfo *info, char *data, size_t len)
{
  // data[len] = 0;
  // String message = (char*)data;
  //  Check if the message is "getReadings"
  // if (strcmp((char*)data, "getReadings") == 0) {
  // if it is, send current sensor readings
  String msg = "time ";
  Serial.print("sending to clients: ");
  Serial.println(msg);
  ws.textAll(msg);
}

static void handleWebSocketMessageBinary(AwsFrameInfo *info, byte *data, size_t len)
{
  for (size_t i = 0; i < info->len; i++)
  {
    Serial.printf("%02x ", data[i]);
  }
  Serial.printf("\n");
}

void onEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len)
{

  if (type == WS_EVT_CONNECT)
  {
    Serial.printf("ws[%s][%u] connect\n", server->url(), client->id());
    client->printf("Hello Client %u :)", client->id());
    client->ping();
  }
  else if (type == WS_EVT_DISCONNECT)
  {
    Serial.printf("ws[%s][%u] disconnect: %u\n", server->url(), client->id());
  }
  else if (type == WS_EVT_ERROR)
  {
    Serial.printf("ws[%s][%u] error(%u): %s\n", server->url(), client->id(), *((uint16_t *)arg), (char *)data);
  }
  else if (type == WS_EVT_PONG)
  {
    // Serial.printf("ws[%s][%u] pong[%u]: %s\n", server->url(), client->id(), len, (len) ? (char *)data : "");
  }
  else if (type == WS_EVT_DATA)
  {
    // data packet
    AwsFrameInfo *info = (AwsFrameInfo *)arg;
    if (info->final && info->index == 0 && info->len == len)
    {
      // the whole message is in a single frame and we got all of it's data
      Serial.printf("ws[%s][%u] %s-message[%llu]: ", server->url(), client->id(), (info->opcode == WS_TEXT) ? "text" : "binary", info->len);
      if (info->opcode == WS_TEXT)
      {
        // data[len] = 0;
        // Serial.printf("%s\n", (char *)data);
        handleWebSocketMessage(info, (char *)data, len);
        client->text("I got your text message");
      }
      else
      {
        handleWebSocketMessageBinary(info, data, len);
        client->binary("I got your binary message");
      }
    }
    else
    {
      // message is comprised of multiple frames or the frame is split into multiple packets
      if (info->index == 0)
      {
        if (info->num == 0)
          Serial.printf("ws[%s][%u] %s-message start\n", server->url(), client->id(), (info->message_opcode == WS_TEXT) ? "text" : "binary");
        Serial.printf("ws[%s][%u] frame[%u] start[%llu]\n", server->url(), client->id(), info->num, info->len);
      }

      Serial.printf("ws[%s][%u] frame[%u] %s[%llu - %llu]: ", server->url(), client->id(), info->num, (info->message_opcode == WS_TEXT) ? "text" : "binary", info->index, info->index + len);
      if (info->message_opcode == WS_TEXT)
      {
        data[len] = 0;
        Serial.printf("%s\n", (char *)data);
      }
      else
      {
        for (size_t i = 0; i < len; i++)
        {
          Serial.printf("%02x ", data[i]);
        }
        Serial.printf("\n");
      }

      if ((info->index + len) == info->len)
      {
        Serial.printf("ws[%s][%u] frame[%u] end[%llu]\n", server->url(), client->id(), info->num, info->len);
        if (info->final)
        {
          Serial.printf("ws[%s][%u] %s-message end\n", server->url(), client->id(), (info->message_opcode == WS_TEXT) ? "text" : "binary");
          if (info->message_opcode == WS_TEXT)
            client->text("I got your text message");
          else
            client->binary("I got your binary message");
        }
      }
    }
  }
}